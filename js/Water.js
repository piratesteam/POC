THREE.Water=function(e,r){THREE.Mesh.call(this,e);var l=this,t=void 0!==(r=r||{}).textureWidth?r.textureWidth:512,o=void 0!==r.textureHeight?r.textureHeight:512,s=void 0!==r.clipBias?r.clipBias:0,i=void 0!==r.alpha?r.alpha:1,a=void 0!==r.time?r.time:0,n=void 0!==r.waterNormals?r.waterNormals:null,m=void 0!==r.sunDirection?r.sunDirection:new THREE.Vector3(.70707,.70707,0),u=new THREE.Color(void 0!==r.sunColor?r.sunColor:16777215),c=new THREE.Color(void 0!==r.waterColor?r.waterColor:8355711),d=void 0!==r.eye?r.eye:new THREE.Vector3(0,0,0),v=void 0!==r.distortionScale?r.distortionScale:20,E=void 0!==r.side?r.side:THREE.FrontSide,f=void 0!==r.fog&&r.fog,p=new THREE.Plane,h=new THREE.Vector3,x=new THREE.Vector3,g=new THREE.Vector3,T=new THREE.Matrix4,R=new THREE.Vector3(0,0,-1),w=new THREE.Vector4,H=new THREE.Vector3,C=new THREE.Vector3,S=new THREE.Vector4,y=new THREE.Matrix4,M=new THREE.PerspectiveCamera,D={minFilter:THREE.LinearFilter,magFilter:THREE.LinearFilter,format:THREE.RGBFormat,stencilBuffer:!1},_=new THREE.WebGLRenderTarget(t,o,D);THREE.Math.isPowerOfTwo(t)&&THREE.Math.isPowerOfTwo(o)||(_.texture.generateMipmaps=!1);var k={uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.fog,THREE.UniformsLib.lights,{normalSampler:{value:null},mirrorSampler:{value:null},alpha:{value:1},time:{value:0},size:{value:1},distortionScale:{value:20},textureMatrix:{value:new THREE.Matrix4},sunColor:{value:new THREE.Color(8355711)},sunDirection:{value:new THREE.Vector3(.70707,.70707,0)},eye:{value:new THREE.Vector3},waterColor:{value:new THREE.Color(5592405)}}]),vertexShader:["uniform mat4 textureMatrix;","uniform float time;","varying vec4 mirrorCoord;","varying vec4 worldPosition;",THREE.ShaderChunk.fog_pars_vertex,THREE.ShaderChunk.shadowmap_pars_vertex,"void main() {","\tmirrorCoord = modelMatrix * vec4( position, 1.0 );","\tworldPosition = mirrorCoord.xyzw;","\tmirrorCoord = textureMatrix * mirrorCoord;","\tvec4 mvPosition =  modelViewMatrix * vec4( position, 1.0 );","\tgl_Position = projectionMatrix * mvPosition;",THREE.ShaderChunk.fog_vertex,THREE.ShaderChunk.shadowmap_vertex,"}"].join("\n"),fragmentShader:["uniform sampler2D mirrorSampler;","uniform float alpha;","uniform float time;","uniform float size;","uniform float distortionScale;","uniform sampler2D normalSampler;","uniform vec3 sunColor;","uniform vec3 sunDirection;","uniform vec3 eye;","uniform vec3 waterColor;","varying vec4 mirrorCoord;","varying vec4 worldPosition;","vec4 getNoise( vec2 uv ) {","\tvec2 uv0 = ( uv / 103.0 ) + vec2(time / 17.0, time / 29.0);","\tvec2 uv1 = uv / 107.0-vec2( time / -19.0, time / 31.0 );","\tvec2 uv2 = uv / vec2( 8907.0, 9803.0 ) + vec2( time / 101.0, time / 97.0 );","\tvec2 uv3 = uv / vec2( 1091.0, 1027.0 ) - vec2( time / 109.0, time / -113.0 );","\tvec4 noise = texture2D( normalSampler, uv0 ) +","\t\ttexture2D( normalSampler, uv1 ) +","\t\ttexture2D( normalSampler, uv2 ) +","\t\ttexture2D( normalSampler, uv3 );","\treturn noise * 0.5 - 1.0;","}","void sunLight( const vec3 surfaceNormal, const vec3 eyeDirection, float shiny, float spec, float diffuse, inout vec3 diffuseColor, inout vec3 specularColor ) {","\tvec3 reflection = normalize( reflect( -sunDirection, surfaceNormal ) );","\tfloat direction = max( 0.0, dot( eyeDirection, reflection ) );","\tspecularColor += pow( direction, shiny ) * sunColor * spec;","\tdiffuseColor += max( dot( sunDirection, surfaceNormal ), 0.0 ) * sunColor * diffuse;","}",THREE.ShaderChunk.common,THREE.ShaderChunk.packing,THREE.ShaderChunk.bsdfs,THREE.ShaderChunk.fog_pars_fragment,THREE.ShaderChunk.lights_pars_begin,THREE.ShaderChunk.shadowmap_pars_fragment,THREE.ShaderChunk.shadowmask_pars_fragment,"void main() {","\tvec4 noise = getNoise( worldPosition.xz * size );","\tvec3 surfaceNormal = normalize( noise.xzy * vec3( 1.5, 1.0, 1.5 ) );","\tvec3 diffuseLight = vec3(0.0);","\tvec3 specularLight = vec3(0.0);","\tvec3 worldToEye = eye-worldPosition.xyz;","\tvec3 eyeDirection = normalize( worldToEye );","\tsunLight( surfaceNormal, eyeDirection, 100.0, 2.0, 0.5, diffuseLight, specularLight );","\tfloat distance = length(worldToEye);","\tvec2 distortion = surfaceNormal.xz * ( 0.001 + 1.0 / distance ) * distortionScale;","\tvec3 reflectionSample = vec3( texture2D( mirrorSampler, mirrorCoord.xy / mirrorCoord.w + distortion ) );","\tfloat theta = max( dot( eyeDirection, surfaceNormal ), 0.0 );","\tfloat rf0 = 0.3;","\tfloat reflectance = rf0 + ( 1.0 - rf0 ) * pow( ( 1.0 - theta ), 5.0 );","\tvec3 scatter = max( 0.0, dot( surfaceNormal, eyeDirection ) ) * waterColor;","\tvec3 albedo = mix( ( sunColor * diffuseLight * 0.3 + scatter ) * getShadowMask(), ( vec3( 0.1 ) + reflectionSample * 0.9 + reflectionSample * specularLight ), reflectance);","\tvec3 outgoingLight = albedo;","\tgl_FragColor = vec4( outgoingLight, alpha );",THREE.ShaderChunk.tonemapping_fragment,THREE.ShaderChunk.fog_fragment,"}"].join("\n")},P=new THREE.ShaderMaterial({fragmentShader:k.fragmentShader,vertexShader:k.vertexShader,uniforms:THREE.UniformsUtils.clone(k.uniforms),transparent:!0,lights:!0,side:E,fog:f});P.uniforms.mirrorSampler.value=_.texture,P.uniforms.textureMatrix.value=y,P.uniforms.alpha.value=i,P.uniforms.time.value=a,P.uniforms.normalSampler.value=n,P.uniforms.sunColor.value=u,P.uniforms.waterColor.value=c,P.uniforms.sunDirection.value=m,P.uniforms.distortionScale.value=v,P.uniforms.eye.value=d,l.material=P,l.onBeforeRender=function(e,r,t){if(x.setFromMatrixPosition(l.matrixWorld),g.setFromMatrixPosition(t.matrixWorld),T.extractRotation(l.matrixWorld),h.set(0,0,1),h.applyMatrix4(T),H.subVectors(x,g),!(0<H.dot(h))){H.reflect(h).negate(),H.add(x),T.extractRotation(t.matrixWorld),R.set(0,0,-1),R.applyMatrix4(T),R.add(g),C.subVectors(x,R),C.reflect(h).negate(),C.add(x),M.position.copy(H),M.up.set(0,1,0),M.up.applyMatrix4(T),M.up.reflect(h),M.lookAt(C),M.far=t.far,M.updateMatrixWorld(),M.projectionMatrix.copy(t.projectionMatrix),y.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),y.multiply(M.projectionMatrix),y.multiply(M.matrixWorldInverse),p.setFromNormalAndCoplanarPoint(h,x),p.applyMatrix4(M.matrixWorldInverse),w.set(p.normal.x,p.normal.y,p.normal.z,p.constant);var o=M.projectionMatrix;S.x=(Math.sign(w.x)+o.elements[8])/o.elements[0],S.y=(Math.sign(w.y)+o.elements[9])/o.elements[5],S.z=-1,S.w=(1+o.elements[10])/o.elements[14],w.multiplyScalar(2/w.dot(S)),o.elements[2]=w.x,o.elements[6]=w.y,o.elements[10]=w.z+1-s,o.elements[14]=w.w,d.setFromMatrixPosition(t.matrixWorld);var i=e.getRenderTarget(),a=e.vr.enabled,n=e.shadowMap.autoUpdate;l.visible=!1,e.vr.enabled=!1,e.shadowMap.autoUpdate=!1,e.setRenderTarget(_),e.clear(),e.render(r,M),l.visible=!0,e.vr.enabled=a,e.shadowMap.autoUpdate=n,e.setRenderTarget(i)}}},THREE.Water.prototype=Object.create(THREE.Mesh.prototype),THREE.Water.prototype.constructor=THREE.Water;